services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_INSTALL_PLUGINS: marcusolsson-json-datasource,vonage-status-panel,flant-statusmap-panel
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

  # Группа 1
  node1:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-1
      - PORT=8080
      - GROUP_ID=group-1
      - IS_SUPER_NODE=true
    ports:
      - "8080:8080"
    depends_on:
      - kafka

  node2:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-2
      - PORT=8081
      - GROUP_ID=group-1
      - IS_SUPER_NODE=false
    ports:
      - "8081:8081"
    depends_on:
      - kafka

  # Группа 2
  node3:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-3
      - PORT=8082
      - GROUP_ID=group-2
      - IS_SUPER_NODE=true
    ports:
      - "8082:8082"
    depends_on:
      - kafka

  node4:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-4
      - PORT=8083
      - GROUP_ID=group-2
      - IS_SUPER_NODE=false
    ports:
      - "8083:8083"
    depends_on:
      - kafka

  # Группа 3
  node5:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-5
      - PORT=8084
      - GROUP_ID=group-3
      - IS_SUPER_NODE=true
    ports:
      - "8084:8084"
    depends_on:
      - kafka

  node6:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-6
      - PORT=8085
      - GROUP_ID=group-3
      - IS_SUPER_NODE=false
    ports:
      - "8085:8085"
    depends_on:
      - kafka

volumes:
  grafana-storage: