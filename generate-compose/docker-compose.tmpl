{{- $totalNodes := .TotalNodes }}
{{- $numGroups := .NumGroups }}
{{- $nodesPerGroup := div $totalNodes $numGroups }}

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 5s
      retries: 10

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_INSTALL_PLUGINS: marcusolsson-json-datasource,vonage-status-panel,flant-statusmap-panel
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning

  {{- range $group := loop 1 $numGroups }}
    {{- $startNode := add (mul (sub $group 1) $nodesPerGroup) 1 }}
    {{- $endNode := mul $group $nodesPerGroup }}
    {{- if eq $group $numGroups }}
      {{- $endNode = $totalNodes }}
    {{- end }}

    {{- range $nodeID := loop $startNode $endNode }}
  node{{ $nodeID }}:
    build:
      context: ./node-service
      dockerfile: Dockerfile
    environment:
      - NODE_ID=node-{{ $nodeID }}
      - PORT={{ add 8079 $nodeID }}
      - GROUP_ID=group-{{ $group }}
      - IS_SUPER_NODE={{ if isSuperNode $nodeID }}true{{ else }}false{{ end }}
      - NUM_OF_NODES={{ $totalNodes }}
      - NUM_OF_GROUPS={{ $numGroups }}
      - PERCENT_OF_LOSS=0
    ports:
      - "{{ add 8079 $nodeID }}:{{ add 8079 $nodeID }}"
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{ add 8079 $nodeID }}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    {{- end }}
  {{- end }}


volumes:
  grafana-storage: